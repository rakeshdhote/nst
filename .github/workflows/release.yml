# This workflow handles the release process for the Tauri application
# It can be triggered either by pushing a tag or manually through the GitHub Actions UI
name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build for Linux'
        type: boolean
        default: false
      build_windows:
        description: 'Build for Windows'
        type: boolean
        default: false
      build_macos_intel:
        description: 'Build for macOS (Intel)'
        type: boolean
        default: false
      build_macos_arm:
        description: 'Build for macOS (Apple Silicon)'
        type: boolean
        default: false
      version:
        description: 'Release version'
        type: string
        required: true
      release_type:
        description: 'Release type'
        type: choice
        required: true
        options:
          - production
          - beta
          - alpha
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true

jobs:
  build-linux:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_linux == 'true'
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest Ubuntu environment
    runs-on: ubuntu-22.04
    # Run if: tag push OR workflow_dispatch with platform 'linux'
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install Linux-specific dependencies
      - name: Install dependencies (ubuntu only)
        shell: bash
        run: |
          if ! sudo apt-get update; then
            echo "Failed to update package lists"
            exit 1
          fi
          if ! sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgdk-pixbuf2.0-dev \
            libgdk3.0-cil-dev \
            libcairo2-dev \
            libsoup-3.0-dev \
            libsoup-3.0 \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.1-dev \
            patchelf; then
            echo "Failed to install dependencies"
            exit 1
          fi

      # Set PKG_CONFIG_PATH for system libraries
      - name: Set PKG_CONFIG_PATH
        shell: bash
        run: |
          if ! echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV; then
            echo "Failed to set PKG_CONFIG_PATH"
            exit 1
          fi

      # Install project dependencies using pnpm
      - name: Install dependencies
        shell: bash
        run: |
          if ! pnpm install; then
            echo "Failed to install project dependencies"
            exit 1
          fi

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      # Install Python dependencies
      - name: Install Python dependencies
        shell: bash
        run: |
          if ! cd backend/python; then
            echo "Failed to change directory to backend/python"
            exit 1
          fi
          if ! pip install -r requirements.txt; then
            echo "Failed to install Python dependencies"
            exit 1
          fi

      # Build Python binary
      - name: Build Python binary
        shell: bash
        run: |
          if ! cd backend/python; then
            echo "Failed to change directory to backend/python"
            exit 1
          fi
          if ! pyinstaller --onefile --name fastapi_server main.py; then
            echo "Failed to build Python binary"
            exit 1
          fi
          if ! mkdir -p ../../src-tauri/resources; then
            echo "Failed to create resources directory"
            exit 1
          fi
          if ! cp dist/fastapi_server ../../src-tauri/resources/; then
            echo "Failed to copy binary to target directory"
            exit 1
          fi

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY != '' }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v${{ github.event.inputs.version || '0.0.1' }}
          releaseName: v${{ github.event.inputs.version || '0.0.1' }}
          releaseBody: |
            See the assets to download and install this version.
            
            Changes in this version:
            - Release build
          releaseDraft: false
          prerelease: ${{ github.event.inputs.release_type != 'production' }}
          includeUpdaterJson: true

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-macos-intel:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_intel == 'true'
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r backend/python/requirements.txt
          python -m pip install pyinstaller
          
      - name: Install frontend dependencies
        run: pnpm install
        
      - name: Build Python
        run: pwsh scripts/build-python.ps1
        
      - name: Import Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
      - name: Build the app
        env:
          APPLE_CERTIFICATE_ID: ${{ secrets.APPLE_CERTIFICATE_ID }}
        run: pnpm tauri build

  build-macos-arm:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_arm == 'true'
    permissions:
      contents: write
    runs-on: macos-latest-xlarge
    steps:
      - uses: actions/checkout@v3
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r backend/python/requirements.txt
          python -m pip install pyinstaller
          
      - name: Install frontend dependencies
        run: pnpm install
        
      - name: Build Python
        run: pwsh scripts/build-python.ps1
        
      - name: Import Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
      - name: Build the app
        env:
          APPLE_CERTIFICATE_ID: ${{ secrets.APPLE_CERTIFICATE_ID }}
        run: pnpm tauri build

  build-windows:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_windows == 'true'
    permissions:
      contents: write
    runs-on: windows-latest
    env:
      RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          cd ${{ github.workspace }}
          python -m pip install --upgrade pip
          python -m pip install -r backend/python/requirements.txt
          python -m pip install pyinstaller
          
      - name: Install frontend dependencies
        run: pnpm install
        
      - name: Build Python
        run: pwsh scripts/build-python.ps1
        
      - name: Build the app
        run: pnpm tauri build

      - name: Get release version
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: NSR Technologies App ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type != 'production' }}
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/*.exe