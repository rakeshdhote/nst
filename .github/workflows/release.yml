# This workflow handles the release process for the Tauri application
# It can be triggered either by pushing a tag or manually through the GitHub Actions UI
name: Release
on:
  # Manual trigger with platform selection
  workflow_dispatch:
    inputs:
      platform:
        description: 'Select platform to build'
        required: true
        type: choice
        options:
          - linux
          - macos-intel
          - macos-arm
          - windows
      auto_release:
        description: 'Create automatic release'
        type: boolean
        default: false
  # Optional automatic trigger on tag push (disabled by default)
  push:
    tags:
      - 'v*'
    paths-ignore:
      - '**'  # Ignore all paths by default, requiring manual confirmation

jobs:
  check-auto-release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.auto_release }}" == "true" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest Ubuntu environment
    runs-on: ubuntu-22.04
    # Run if: tag push OR workflow_dispatch with platform 'linux'
    if: >-
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'linux') ||
      (needs.check-auto-release.outputs.should_release == 'true')
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install Linux-specific dependencies
      - name: Install dependencies (ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgdk-pixbuf2.0-dev \
            libgdk3.0-cil-dev \
            libcairo2-dev \
            patchelf

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-macos-intel:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest macOS environment
    runs-on: macos-latest
    # Run if: tag push OR workflow_dispatch with platform 'macos-intel'
    if: >-
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'macos-intel') ||
      (needs.check-auto-release.outputs.should_release == 'true')
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '--target x86_64-apple-darwin'

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-macos-arm:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest macOS environment
    runs-on: macos-latest
    # Run if: tag push OR workflow_dispatch with platform 'macos-arm'
    if: >-
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'macos-arm') ||
      (needs.check-auto-release.outputs.should_release == 'true')
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '--target aarch64-apple-darwin'

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-windows:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest Windows environment
    runs-on: windows-latest
    # Run if: tag push OR workflow_dispatch with platform 'windows'
    if: >-
      (github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'windows') ||
      (needs.check-auto-release.outputs.should_release == 'true')
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install code signing tools for Windows
      - name: Install Windows Signing Dependencies
        run: |
          dotnet tool install --global AzureSignTool

      # Build and sign Windows executables
      - name: Build and Sign Windows App
        env:
          # Tauri update keys
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Azure Key Vault credentials for code signing
          AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
          # GitHub token for releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Additional Tauri signing keys
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          pnpm run tauri build
          $msi = Get-ChildItem -Path "src-tauri\target\release\bundle\msi\*.msi" -File | Select-Object -First 1
          $exe = Get-ChildItem -Path "src-tauri\target\release\bundle\nsis\*.exe" -File | Select-Object -First 1
          
          # Sign MSI installer
          AzureSignTool sign `
            -kvu "$env:AZURE_KEY_VAULT_URI" `
            -kvi "$env:AZURE_CLIENT_ID" `
            -kvt "$env:AZURE_TENANT_ID" `
            -kvs "$env:AZURE_CLIENT_SECRET" `
            -kvc "$env:CERTIFICATE_NAME" `
            -tr http://timestamp.digicert.com `
            -v "$msi"
          
          # Sign EXE installer
          AzureSignTool sign `
            -kvu "$env:AZURE_KEY_VAULT_URI" `
            -kvi "$env:AZURE_CLIENT_ID" `
            -kvt "$env:AZURE_TENANT_ID" `
            -kvs "$env:AZURE_CLIENT_SECRET" `
            -kvc "$env:CERTIFICATE_NAME" `
            -tr http://timestamp.digicert.com `
            -v "$exe"

      # Create GitHub release for Windows builds
      - name: Create Release (Windows)
        uses: softprops/action-gh-release@v1
        with:
          # Include both MSI and EXE installers in the release
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          tag_name: v__VERSION__
          name: "App v__VERSION__"
          body: "See the assets to download this version and install."
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}