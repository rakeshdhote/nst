# This workflow handles the release process for the Tauri application
# It can be triggered either by pushing a tag or manually through the GitHub Actions UI
name: Release
on:
  # Manual trigger with platform selection
  workflow_dispatch:
    inputs:
      platform:
        description: 'Select platform(s) to build'
        required: true
        type: choice
        options:
          - all
          - linux
          - windows
          - macos-intel
          - macos-arm
      release_type:
        description: 'Release type'
        type: choice
        required: true
        options:
          - production
          - beta
          - alpha
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true
  # Optional automatic trigger on tag push (disabled by default)
  push:
    tags:
      - 'v*'
    paths-ignore:
      - '**'  # Ignore all paths by default, requiring manual confirmation

jobs:
  check-auto-release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      platform: ${{ steps.check.outputs.platform }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "platform=${{ github.event.inputs.platform }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "platform=windows" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "platform=none" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest Ubuntu environment
    runs-on: ubuntu-22.04
    # Run if: tag push OR workflow_dispatch with platform 'linux'
    if: >-
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all')) ||
      (github.event_name == 'push' && needs.check-auto-release.outputs.should_release == 'true' && (needs.check-auto-release.outputs.platform == 'linux' || needs.check-auto-release.outputs.platform == 'all'))
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install Linux-specific dependencies
      - name: Install dependencies (ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgdk-pixbuf2.0-dev \
            libgdk3.0-cil-dev \
            libcairo2-dev \
            libsoup-3.0-dev \
            libsoup-3.0 \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.1-dev \
            patchelf

      # Set PKG_CONFIG_PATH for system libraries
      - name: Set PKG_CONFIG_PATH
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-macos-intel:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest macOS environment
    runs-on: macos-latest
    # Run if: tag push OR workflow_dispatch with platform 'macos-intel'
    if: >-
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'macos-intel' || github.event.inputs.platform == 'all')) ||
      (github.event_name == 'push' && needs.check-auto-release.outputs.should_release == 'true' && (needs.check-auto-release.outputs.platform == 'macos-intel' || needs.check-auto-release.outputs.platform == 'all'))
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '--target x86_64-apple-darwin'

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-macos-arm:
    needs: check-auto-release
    # Required for creating GitHub releases
    permissions:
      contents: write
    # Use the latest macOS environment
    runs-on: macos-latest
    # Run if: tag push OR workflow_dispatch with platform 'macos-arm'
    if: >-
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'macos-arm' || github.event.inputs.platform == 'all')) ||
      (github.event_name == 'push' && needs.check-auto-release.outputs.should_release == 'true' && (needs.check-auto-release.outputs.platform == 'macos-arm' || needs.check-auto-release.outputs.platform == 'all'))
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Build the Tauri application
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '--target aarch64-apple-darwin'

      # Cache build outputs for both Next.js and Tauri
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: |
            out
            src-tauri/target
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  build-windows:
    needs: check-auto-release
    permissions:
      contents: write
    runs-on: windows-latest
    if: >-
      needs.check-auto-release.outputs.should_release == 'true' &&
      (needs.check-auto-release.outputs.platform == 'windows' || needs.check-auto-release.outputs.platform == 'all')
    env:
      ENABLE_CODE_SIGNING: ${{ secrets.WINDOWS_SIGN_CERT != '' }}
      WINDOWS_SIGN_CERT: ${{ secrets.WINDOWS_SIGN_CERT }}
      WINDOWS_SIGN_CERT_PASSWORD: ${{ secrets.WINDOWS_SIGN_CERT_PASSWORD }}
      AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install and configure pnpm package manager
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # Set up Node.js environment with caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Install project dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Set up code signing
      - name: Set up code signing
        if: env.ENABLE_CODE_SIGNING == 'true'
        run: |
          if [[ -n "${{ env.AZURE_KEY_VAULT_URI }}" ]]; then
            echo "Using Azure Key Vault for signing"
          elif [[ -n "${{ env.WINDOWS_SIGN_CERT }}" ]]; then
            echo "Using local certificate for signing"
            # Remove any existing certificate files
            rm -f windows-cert.b64 windows-cert.pfx
            # Create and decode certificate
            echo "${{ env.WINDOWS_SIGN_CERT }}" > windows-cert.b64
            certutil -decode windows-cert.b64 windows-cert.pfx
            # Verify certificate was created
            if [ ! -f windows-cert.pfx ]; then
              echo "Failed to create certificate file"
              exit 1
            fi
          fi
        shell: bash

      # Build the app
      - name: Build the app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          ENABLE_CODE_SIGNING: ${{ env.ENABLE_CODE_SIGNING }}
          WINDOWS_SIGN_CERT_PASSWORD: ${{ secrets.WINDOWS_SIGN_CERT_PASSWORD }}
        run: |
          if [[ "${{ env.ENABLE_CODE_SIGNING }}" == "true" ]]; then
            pnpm tauri build
          else
            pnpm tauri build
          fi
        shell: bash

      # Clean up sensitive files
      - name: Clean up certificates
        if: always()
        run: |
          rm -f windows-cert.b64 windows-cert.pfx
        shell: bash